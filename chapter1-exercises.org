[[https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%25_sec_1.2][Taken from here]]
* Section 1.2.4
** Exercise 1.17
*** Problem Statement
The following multiplication procedure (in which it is assumed that
our language can only add, not multiply) is analogous to the =expt=
procedure:
#+BEGIN_SRC scheme
    (define (* a b)
    (if (= b 0)
        0
        (+ a (* a (- b 1)))))
#+END_SRC
This algorithm takes a number of steps that is linear in =b=.  Now
suppose we include, together with addition, operations =double=, which
doubles and integer, and =halve= which divides an (even) integer
by 2.  Using these design a multiplication procedure analogous to
=fast-expt= that uses a logarithmic number of steps.

*** Solution
#+BEGIN_SRC scheme
  (define (even? n)
    (= (remainder n 2) 0))
  (define (double x)
    (+ x x))
  (define (halve x)
    (/ x 2))
    (define (fast-* a b)
      (cond ((= b 2) (double a))
            ((even? b) (double (fast-* a (halve b))))
            (else (+ a (fast-* a (- b 1))))))
  (and (= (fast-* 12 12) 144)
       (= (fast-* 7 3)   21)
       (= (fast-* 10 10) 100))
#+END_SRC

** Exercise 1.18
*** Problem Statement
Using the results of exercise 1.16 and 1.17, devise a procedure that
generates an iterative process for multiplying two integers in terms
of adding, doubling, and halving and uses a logarithmic number of
steps.
*** Solution

** Exercise 1.20
** Exercise 1.22 
** Exercise 1.24 
** Exercise 1.26 
** Exercise 1.27
** Exercise 1.30 
** Exercise 1.31
** Exercise 1.34 
** Exercise 1.40 
** Exercise 1.41 
** Exercise 1.43 
** Exercise 1.45 
** Exercise 1.46
